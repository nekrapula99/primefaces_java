package com.tlm.faelec.web.controller;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;

import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.primefaces.event.SelectEvent;
import org.springframework.stereotype.Controller;

//import com.ibm.org.omg.CORBA.ExceptionDescription;
import com.tlm.faelec.listas.SeListas;
import com.tlm.faelec.service.maestros.IMpreci00Service;
import com.tlm.faelec.utils.Constantes;
import com.tlm.faelec.utils.UtilsJSF;
import com.tlm.faelec.web.controller.SeControlFactura.NombresListas;
import com.tlm.faelecEntities.model.entities.Macdio00;
import com.tlm.faelecEntities.model.entities.Mcampo00;
import com.tlm.faelecEntities.model.entities.Mpreci00;


@Controller
@ManagedBean
@ViewScoped
public class SeMpreci00 extends Control implements Serializable{
	private static final long serialVersionUID = 1L;
	
	@ManagedProperty(value = "#{mpreci00Service}")
	private IMpreci00Service mpreci00Service;
	
	@ManagedProperty(value = "#{seListas}") 
	private SeListas seListas;
	
	private Mpreci00 mpreci00;
	private Mpreci00 mpreci00Cop;
	private List<Mpreci00> listMpreci00;
	private List<Mpreci00> filteredMpreci00;
	private Integer fracDec_CantiM; //
	private Integer fracDec_ValruM;
	
	// Variables Carga de lista
	private String update;
	private String nombreTabla;
	private String nombreLista;
	private Object objSeCall;
	private boolean tabInfBase; //Tab Informacion base
	private boolean tabOfertas; //Tab ofertas
	private String[] pestanas;
	boolean validacionRango = false;
	
	private Map<String, String> idiomasHm;
	private Map<String, String> idiomasAyuHm;
	private Map<String, String> permisos;
	private HashMap<String, String> idiomasTituloHm;
	public  HashMap<String, Mcampo00> permisoCampos;
	private String tabla;
	private String accion;
	private String titulo;
	
	
	@PostConstruct
	public void init(){
		try{
			super.init("MPRECI00");
			mpreci00 = new Mpreci00();
			idiomasHm= super.getIdiomasHm();
			idiomasAyuHm= super.getIdiomasAyuHm();
			idiomasTituloHm = super.getIdiomasTituloHm();
			permisos = super.getPermisos();
			permisoCampos= super.getPermisoCampos();
			tabla=super.getTabla();
			accion=super.getSeControlFactura().getAccion();
			titulo=super.getSeControlFactura().getTitulo();
			
			
			Double d1=(Double)getSeControlFactura().PARAMETROS.get("Dec_CantiM");	
			Double d2=(Double)getSeControlFactura().PARAMETROS.get("Dec_ValruM");	
			setFracDec_CantiM(d1.intValue());
			setFracDec_ValruM(d2.intValue());
			cargarDatos();					
		}catch(Exception e){
			e.printStackTrace();
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(), FacesMessage.SEVERITY_ERROR);
		}
		
	}
		//Se reinician los valores por defecto de las listas de valores
	private void reiniciarListasMaestro(){
		try {
			seListas.actualizarListas(NombresListas.listMconca);
			seListas.actualizarListas(NombresListas.listMgenteCliente);
			seListas.actualizarListas(NombresListas.listMgenusMoneda);
			seListas.actualizarListas(NombresListas.listMpropr);

		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	public void accionNuevo() {
		try {
			setAccion(Constantes.ACCION_NUEVO);
			getSeControlFactura().setAccion(Constantes.ACCION_NUEVO);
			getSeControlFactura().setTitulo(titulo);
			getSeControlFactura().setTabla(tabla);
			seListas.actualizarListas(NombresListas.listMconca);
			mpreci00 = new Mpreci00();
			mpreci00.setRegcci(true);
			getSeListas().actualizarListas(NombresListas.listMconca);
			reiniciarListasMaestro();
		} catch (Exception e) {
			e.printStackTrace();
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(), FacesMessage.SEVERITY_ERROR);
		}
	}

	public void accionModificar(SelectEvent event) {
		try {
			setAccion(Constantes.ACCION_MODIFICAR);
			getSeControlFactura().setAccion(Constantes.ACCION_MODIFICAR);
			getSeControlFactura().setTitulo(titulo);
			getSeControlFactura().setTabla(tabla);
			mpreci00Cop= (Mpreci00) mpreci00.clone();
			if(mpreci00.getMconca00() != null){
				actualizarListasCompania(mpreci00.getMconca00().getCodcia());
				getSeControlFactura().cargarParametros(true,null,mpreci00.getMconca00().getIdccia());
			}else{
				getSeControlFactura().cargarParametros(true,null,null);
				reiniciarListasMaestro();
			}

			
			//Se valida si las listas del formulario tienen campos deshabilitados
			if(validarListas()==true){
				//Se ejecuta el metodo para que no se pierda el objeto de las listas al momento de hacer un submit en el guardar
				UtilsJSF.tratamientoObjetoDeshabilitadoListas(mpreci00.getMgenus00(), mpreci00.getMgenus00().getMtipre00().getTipore());
				UtilsJSF.tratamientoObjetoDeshabilitadoListas(mpreci00.getMgente00(), mpreci00.getMgente00().getMtipre00().getTipore());
				UtilsJSF.tratamientoObjetoDeshabilitadoListas(mpreci00.getMpropr00(), null);
				UtilsJSF.tratamientoObjetoDeshabilitadoListas(mpreci00.getMconca00(), null);
			}
			mpreci00Cop= (Mpreci00) mpreci00.clone();	
		} catch (Exception e) {
			e.printStackTrace();
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(), FacesMessage.SEVERITY_ERROR);
		}
	}
	
	// metedo que captura el objeto al modificar y actualiza las listas de compañias 
		private void actualizarListasCompania (String codigoCompania){
			try{
				List<String> listMconca00ActualizarListas;
				listMconca00ActualizarListas = new ArrayList<String>();
				listMconca00ActualizarListas.add(codigoCompania);
				seListas.actualizarListasCompania(NombresListas.listMconca, listMconca00ActualizarListas);
				seListas.actualizarListasCompania(NombresListas.listMgenteCliente, listMconca00ActualizarListas);
				seListas.actualizarListasCompania(NombresListas.listMgenusMoneda, listMconca00ActualizarListas);
				seListas.actualizarListasCompania(NombresListas.listMpropr, listMconca00ActualizarListas);
				RequestContext.getCurrentInstance().update("formTable");
			}catch(Exception e){
				e.printStackTrace();
			}
		}
	
	public void autocompleteActualizarListas (){
		try{
			if(mpreci00.getMconca00() != null){
			actualizarListasCompania(mpreci00.getMconca00().getCodcia());
			}else{
				reiniciarListasMaestro();
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void cargarDatos() {
		try{
			listMpreci00 = mpreci00Service.listMpreci00ByCriteria(new Mpreci00(),getSeControlFactura().getCompaniasUsu());			
			UtilsJSF.resetDTable("formTable:dTable");
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	private void colaEstandar() {
		try {
			mpreci00.setUsecci(getSeControlFactura().codusu);
			mpreci00.setPrgcci("Precios " + getClass().getName());
			mpreci00.setFeacci(new Date());
			mpreci00.setMaqcci(getSeControlFactura().ip);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/*Metodo que se encarga de validar que los registros de las listas esten habilitados
	 * en caso de estar deshabilitado algun registro devuelve true
	 */
	private boolean validarListas(){
		boolean validacion = false;
		//Se valida que las listas que tiene el usuario en el formulario esten activas 
//			//Validacion lista  Moneda de precion OK
		if(mpreci00.getMgenus00() != null &&  mpreci00.getMgenus00().getRegius()==false){
			UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, 
		    getIdiomasHm().get("idmoci")+" "+ mpreci00.getMgenus00().getCodius() +" "+getSeControlFactura().MENSAJES.get("Cam_Deshab"));			
			validacion = true;
		}
//			//Validacion lista Cliente (Tercero)
		if(mpreci00.getMgente00() != null && mpreci00.getMgente00().getRegite() == false){
			UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, 
		    getIdiomasHm().get("idteci")+" "+mpreci00.getMgente00().getCodite()+" "+getSeControlFactura().MENSAJES.get("Cam_Deshab"));
			validacion = true;
		}
		
//			//Validacion lista Producto
		if(mpreci00.getMpropr00() != null && mpreci00.getMpropr00().getRegipr() == false){
			UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, 
		    getIdiomasHm().get("idptci")+" "+mpreci00.getMpropr00().getCodcpr()+" "+getSeControlFactura().MENSAJES.get("Cam_Deshab"));
			validacion = true;
		}	
		
//			//Validacion lista Compania
		if(mpreci00.getMconca00() != null && mpreci00.getMconca00().getRegcia() == false){
			UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, 
		    getIdiomasHm().get("idcmci")+" "+mpreci00.getMconca00().getCodcia()+" "+getSeControlFactura().MENSAJES.get("Cam_Deshab"));
			validacion = true;
		}	
		
		return validacion;
	}
	
	public void validarRango()
	 {
	   List<Mpreci00> listaMpreci = mpreci00Service.listMpreci00(mpreci00, getSeControlFactura().getCompaniasUsu());
	   validacionRango=true;
	   for (Mpreci00 mpreci : listaMpreci) 
	   {
		   if(mpreci00.getIdprci()!=mpreci.getIdprci())
		   {
			   if(mpreci00.getCminci()>mpreci.getCminci() && mpreci00.getCminci()<mpreci.getCmaxci())
			   {
				   UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, "El rango ya se encuentra para esas caracteristicas");
				   RequestContext.getCurrentInstance().update("formTable"); 
				   validacionRango=false;
				   break; 
			   }
			   if(mpreci00.getCmaxci()>mpreci.getCminci() && mpreci00.getCmaxci()<mpreci.getCmaxci())
			   {
				   UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, "El rango ya se encuentra para esas caracteristicas");
				   RequestContext.getCurrentInstance().update("formTable"); 
				   validacionRango=false;
				   return;  
			   }
			   if(mpreci00.getCmaxci()>mpreci.getCminci() && mpreci00.getCmaxci()<mpreci.getCmaxci())
			   {
				   UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, "El rango ya se encuentra para esas caracteristicas");
				   RequestContext.getCurrentInstance().update("formTable");
				   validacionRango=false;
				   break;  
			   }
			   if(mpreci00.getCminci().equals(mpreci.getCminci()) || mpreci00.getCminci().equals(mpreci.getCmaxci()))
			   {
				   UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, "El rango ya se encuentra para esas caracteristicas");
				   RequestContext.getCurrentInstance().update("formTable");
				   validacionRango=false;
				   break;  
			   }
			   if(mpreci00.getCmaxci().equals(mpreci.getCminci()) || mpreci00.getCmaxci().equals(mpreci.getCmaxci()))
			   {
				   UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, "El rango ya se encuentra para esas caracteristicas");
				   RequestContext.getCurrentInstance().update("formTable");
				   validacionRango=false;
				   break;  
			   }
		   }
	   }
	 }
	
	public void save() {
		try {										
			//Se guardan los datos de la cola estandar
			colaEstandar();
			
				if(getAccion().equals(Constantes.ACCION_MODIFICAR))
				{
				    if(validacionRango){
				    	
				    	validacionRango=false;
				    	//UtilsJSF.closeDialog("dlgNuevoUpdate");
					    if(validarListas()==false){
					    	mpreci00Service.save(mpreci00,getSeControlFactura().PARAMETROS.get("Reg_Audito").equals("S")?getSeControlFactura().crearAuditoria(null,mpreci00.toString(),mpreci00.toStringId(),mpreci00Cop.toString()):null);
					    }
				    }else {
				    	validarRango();
				    	return;
				    }
				}else {
					mpreci00Service.save(mpreci00,getSeControlFactura().PARAMETROS.get("Reg_Audito").equals("S")?getSeControlFactura().crearAuditoria(null,mpreci00.toString(),mpreci00.toStringId(),null):null);
				 }
			
			cargarDatos();	
			UtilsJSF.closeDialog("dlgNuevoUpdate");
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(), FacesMessage.SEVERITY_INFO);
			RequestContext.getCurrentInstance().update("formTable");
		} catch (Exception e) {
			if (UtilsJSF.isDuplicateException(e)) {
				UtilsJSF.facesLog(FacesContext.getCurrentInstance(),"UNIQUE_KEY");
				return;
			}
			else{	
				e.printStackTrace();
				UtilsJSF.facesLog(FacesContext.getCurrentInstance(), FacesMessage.SEVERITY_ERROR);
				return;
			}
		}
	}
	
	public void remove(ActionEvent event) {
		try {
			getSeControlFactura().setTitulo(titulo);
			getSeControlFactura().setTabla(tabla);
			mpreci00 = (Mpreci00) event.getComponent().getAttributes().get("mpreci00");
			mpreci00Service.removeMpreci00(mpreci00,getSeControlFactura().PARAMETROS.get("Reg_Audito").equals("S")?getSeControlFactura().crearAuditoria(Constantes.AUDIT_ELIMINAR,mpreci00.toString(),mpreci00.toStringId()):null);
			cargarDatos();
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(),FacesMessage.SEVERITY_INFO);
			RequestContext.getCurrentInstance().update("formTable");
		} catch (Exception e) {
			if (UtilsJSF.isReferenceConstraintException(e)) {
				UtilsJSF.facesLog(FacesContext.getCurrentInstance(),"REFERENCE");
			} else {
				e.printStackTrace();
				UtilsJSF.facesLog(FacesContext.getCurrentInstance(),FacesMessage.SEVERITY_ERROR);
			}
		}
	}
		
	public void evtCloseDialogMpreci(CloseEvent event) {
		try {
			update = null;
		} catch (Exception e) {
			e.printStackTrace();
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(),
					FacesMessage.SEVERITY_ERROR);
		}
	}
	
	public void preRenderView() {
		try {
			getSeCabecera().setBotonNuevo(true);
			getSeCabecera().setBotonExcel(true);
		} catch (Exception e) {
			e.printStackTrace();
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(), FacesMessage.SEVERITY_ERROR);
		}
	}

	//Getters and Setters

	public IMpreci00Service getMpreci00Service() {
		return mpreci00Service;
	}

	public void setMpreci00Service(IMpreci00Service mpreci00Service) {
		this.mpreci00Service = mpreci00Service;
	}

	public Mpreci00 getMpreci00() {
		return mpreci00;
	}

	public void setMpreci00(Mpreci00 mpreci00) {
		this.mpreci00 = mpreci00;
	}

	public Mpreci00 getMpreci00Cop() {
		return mpreci00Cop;
	}

	public void setMpreci00Cop(Mpreci00 mpreci00Cop) {
		this.mpreci00Cop = mpreci00Cop;
	}

	public List<Mpreci00> getListMpreci00() {
		return listMpreci00;
	}

	public void setListMpreci00(List<Mpreci00> listMpreci00) {
		this.listMpreci00 = listMpreci00;
	}

	public String getUpdate() {
		return update;
	}

	public void setUpdate(String update) {
		this.update = update;
	}

	public String getNombreTabla() {
		return nombreTabla;
	}

	public void setNombreTabla(String nombreTabla) {
		this.nombreTabla = nombreTabla;
	}

	public String getNombreLista() {
		return nombreLista;
	}

	public void setNombreLista(String nombreLista) {
		this.nombreLista = nombreLista;
	}

	public Object getObjSeCall() {
		return objSeCall;
	}

	public void setObjSeCall(Object objSeCall) {
		this.objSeCall = objSeCall;
	}

	public boolean isTabInfBase() {
		return tabInfBase;
	}

	public void setTabInfBase(boolean tabInfBase) {
		this.tabInfBase = tabInfBase;
	}

	public boolean isTabOfertas() {
		return tabOfertas;
	}

	public void setTabOfertas(boolean tabOfertas) {
		this.tabOfertas = tabOfertas;
	}

	public String[] getPestanas() {
		return pestanas;
	}

	public void setPestanas(String[] pestanas) {
		this.pestanas = pestanas;
	}

	public List<Mpreci00> getFilteredMpreci00() {
		return filteredMpreci00;
	}
	public void setFilteredMpreci00(List<Mpreci00> filteredMpreci00) {
		this.filteredMpreci00 = filteredMpreci00;
	}
	public Integer getFracDec_CantiM() {
		return fracDec_CantiM;
	}
	public void setFracDec_CantiM(Integer fracDec_CantiM) {
		this.fracDec_CantiM = fracDec_CantiM;
	}
	public Integer getFracDec_ValruM() {
		return fracDec_ValruM;
	}
	public void setFracDec_ValruM(Integer fracDec_ValruM) {
		this.fracDec_ValruM = fracDec_ValruM;
	}

	public SeListas getSeListas() {
		return seListas;
	}

	public void setSeListas(SeListas seListas) {
		this.seListas = seListas;
	}
	//Metodos de acceso 


	public Map<String, String> getIdiomasHm() {
		return idiomasHm;
	}
	public void setIdiomasHm(Map<String, String> idiomasHm) {
		this.idiomasHm = idiomasHm;
	}
	public Map<String, String> getIdiomasAyuHm() {
		return idiomasAyuHm;
	}
	public void setIdiomasAyuHm(Map<String, String> idiomasAyuHm) {
		this.idiomasAyuHm = idiomasAyuHm;
	}
	public Map<String, String> getPermisos() {
		return permisos;
	}
	public void setPermisos(Map<String, String> permisos) {
		this.permisos = permisos;
	}
	public HashMap<String, String> getIdiomasTituloHm() {
		return idiomasTituloHm;
	}
	public void setIdiomasTituloHm(HashMap<String, String> idiomasTituloHm) {
		this.idiomasTituloHm = idiomasTituloHm;
	}
	public HashMap<String, Mcampo00> getPermisoCampos() {
		return permisoCampos;
	}
	public void setPermisoCampos(HashMap<String, Mcampo00> permisoCampos) {
		this.permisoCampos = permisoCampos;
	}
	public String getTabla() {
		return tabla;
	}
	public void setTabla(String tabla) {
		this.tabla = tabla;
	}
	public String getAccion() {
		return accion;
	}
	public void setAccion(String accion) {
		this.accion = accion;
	}
	public String getTitulo() {
		return titulo;
	}
	public void setTitulo(String titulo) {
		this.titulo = titulo;
	}
	
}
