package com.tlm.faelec.web.controller;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;

import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.SelectEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.primefaces.model.UploadedFile;
import org.springframework.stereotype.Controller;

import com.tlm.faelec.control.seguridad.usuAuditoriaDAO;
import com.tlm.faelec.listas.SeListas;
import com.tlm.faelec.service.maestros.IMgente00Service;
import com.tlm.faelec.service.maestros.IMgenus00Service;
import com.tlm.faelec.service.maestros.IMtiptx00Service;
import com.tlm.faelec.service.trans.ITqigqg00Service;
import com.tlm.faelec.utils.Constantes;
import com.tlm.faelec.utils.Utils;
import com.tlm.faelec.utils.UtilsJSF;
import com.tlm.faelec.web.controller.SeControlFactura.NombresListas;
import com.tlm.faelecEntities.model.entities.Mcampo00;
import com.tlm.faelecEntities.model.entities.Mgente00;
import com.tlm.faelecEntities.model.entities.Mgenus00;
import com.tlm.faelecEntities.model.entities.Mtipre00;
import com.tlm.faelecEntities.model.entities.Mtiptx00;

import com.tlm.faelecEntities.model.entities.Tqigqg00;

@Controller
@ManagedBean
@SessionScoped
public class SeTqigqg00  extends Control implements Serializable{
	
private static final long serialVersionUID = 1L;
	
	@ManagedProperty(value="#{mgenus00Service}")
	IMgenus00Service mgenus00Service;
	
	@ManagedProperty(value = "#{tqigqg00Service}")
	private ITqigqg00Service tqigqg00Service;

	@ManagedProperty(value = "#{mtiptx00Service}")
	private IMtiptx00Service mtiptx00Service;
	
	@ManagedProperty(value="#{seCabecera}")
	private SeCabecera seCabecera;
	
	@ManagedProperty(value = "#{seListas}") 
	private SeListas seListas;
	
	private Mgenus00 mgenus00;
	private List<Mgenus00> listMgenus00s;
	
	private List<Mtiptx00> listMtiptx00;
	private Mtiptx00 mtiptx00;
	
	private Tqigqg00 tqigqg00;
	private Tqigqg00 tqigqg00Cop;
	private List<Tqigqg00> listTqigqg00;
	private List<Tqigqg00> filteredTqigqg00;
	//private String action;

	// Variables Carga de lista
	private String update;
	private String nombreTabla;
	private String nombreLista;
	private Object objSeCall;
		
	private Integer fracDec_CantiM;
	private Integer fracDec_PorceM;
	private String paternDec_CantiM;
	
	private Map<String, String> idiomasHm;
	private Map<String, String> idiomasAyuHm;
	private Map<String, String> permisos;
	private HashMap<String, String> idiomasTituloHm;
	public  HashMap<String, Mcampo00> permisoCampos;
	private String tabla;
	private String accion;
	private String titulo;
	
	
	//Visualizacion de pestañas
	private boolean tabInfBase;
	private boolean tabReq_Prod;
	private boolean tabForma_Pago;
	private boolean tabEnvios;
	private boolean infoGuardada;
	
	private String[] pestanas;
	private int tabView=0;
	
	private UploadedFile DocCoti;
	private boolean changeDoc=false;
	private StreamedContent imageStrem;
	private String docAnterior;
	
	@PostConstruct
	public void init() {
		try {
			System.out.print("INIT COTIZACION");
			super.init("Tqigqg00");
			tqigqg00 = new Tqigqg00();
			idiomasHm= super.getIdiomasHm();
			idiomasAyuHm= super.getIdiomasAyuHm();
			idiomasTituloHm = super.getIdiomasTituloHm();
			permisos = super.getPermisos();
			permisoCampos= super.getPermisoCampos();
			tabla=super.getTabla();
			accion=super.getSeControlFactura().getAccion();
			titulo=super.getSeControlFactura().getTitulo();
			//Double d1=(Double)getSeControlFactura().PARAMETROS.get("Dec_CantiM");	
			//Double d2=(Double)PARAMETROS.get("Dec_ValruM");	
			//setFracDec_CantiM(d1.intValue());
			//setFracDec_ValruM(d2.intValue());
			//ObtenerCliente();
			
			Double d1=(Double)getSeControlFactura().PARAMETROS.get("Dec_CantiM");
			fracDec_CantiM=d1.intValue();
			paternDec_CantiM = calcularPatern(fracDec_CantiM.toString());
			
			tabInfBase = false;
			tabReq_Prod = false;
			tabForma_Pago = false;
			tabEnvios = false;
			cargarDatos();
		} catch (Exception e) {
			e.printStackTrace();
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(), FacesMessage.SEVERITY_ERROR);
		}
	}
	
	//Se reinician los valores por defecto de las listas de valores
	private void reiniciarListasMaestro(){
		try{
			getSeListas().actualizarListas(NombresListas.listMgenteCliente);
			getSeListas().actualizarListas(NombresListas.listMconca);
			getSeListas().actualizarListas(NombresListas.listMgenusMoneda);
			getSeListas().actualizarListas(NombresListas.listMgenusOrganiVentas);
			getSeListas().actualizarListas(NombresListas.listMgenusCanalDistri);
			getSeListas().actualizarListas(NombresListas.listMpropr);
			getSeListas().actualizarListas(NombresListas.listMfunfu);
			//getSeListas().actualizarListas(NombresListas.listMfunfuFunciApoyo);
			RequestContext.getCurrentInstance().update("formTable");
			}catch (Exception e) {
			    e.printStackTrace();
			}		
	}
	
	public void mostrarPestana()
	{
		try{
		   pestanas=((String) getSeControlFactura().PARAMETROS.get("Vis_MaeTqi")).split(","); 
		   for (int i=0; i < pestanas.length;i++){
			   if(pestanas[i].equals("1"))
			   {
				   tabInfBase=true;
			   }
			   if(pestanas[i].equals("2"))
			   {
				   tabReq_Prod=true;
			   }
			   if(pestanas[i].equals("3"))
			   {
				   tabForma_Pago=true;
			   }
			   if(pestanas[i].equals("4"))
			   {
				  tabEnvios = true; 
			   }
			   
/*			   if(pestanas[i].equals("4") && !Utils.isEmptyOrNull(mpropr00.getMgenus006()))
			   {
				   tabVariantes=true;
			   }else{
				   tabVariantes= false;				   
			   }*/
		   }
		   RequestContext.getCurrentInstance().update("formDetalle:tabView");
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void cargarDatos() {
		listTqigqg00 = tqigqg00Service.listTqigqg00ByCriteria(new Tqigqg00());
		
		UtilsJSF.resetDTable("formTable:dTable");
	}
	
	public void accionNuevo() {
		try {
			generar_Numero_CotizacionSHS();
			setAccion(Constantes.ACCION_NUEVO);
			getSeControlFactura().setAccion(Constantes.ACCION_NUEVO);
			getSeControlFactura().setTitulo(titulo);
			getSeControlFactura().setTabla(tabla);
			reiniciarListasMaestro();
			tabView=0;
			tqigqg00 = new Tqigqg00();
			tqigqg00.setRegcqg(true);
			//tqigqg00.setMdespr00s(new ArrayList<Mdespr00>()); -- PENDIENTES
			//tqigqg00.setMvarpr00s(new ArrayList<Mvarpr00>());
			//setMdespr00(null);
			reiniciarListasMaestro();
			mostrarPestana();			 			
		} catch (Exception e) {
			e.printStackTrace();
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(),FacesMessage.SEVERITY_ERROR);
		}
	}
	
	public void accionModificar(SelectEvent event) {
		try {
			//ObtenerCliente();
			setAccion(Constantes.ACCION_MODIFICAR);
			getSeControlFactura().setAccion(Constantes.ACCION_MODIFICAR);
			getSeControlFactura().setTitulo(titulo);
			getSeControlFactura().setTabla(tabla);
			tqigqg00Cop= (Tqigqg00) tqigqg00.clone();
			if(tqigqg00.getMgenus001() != null){
				actualizarListasCompania(tqigqg00.getMgenus001().getCodius());
				getSeControlFactura().cargarParametros(true,null,tqigqg00.getMgenus001().getIdtrus());
			}else{
				getSeControlFactura().cargarParametros(true,null,null);
				reiniciarListasMaestro();
			}
			mostrarPestana();
			tabView=0;
			//Mcotes00 mcotes00Rs = new Mcotes00(); PENDIENTE
			//mcotes00Rs = mcotes00Service.cargarDetalles(mcotes00.getIdctes());
			//tqigqg00.setMcotos001s(mcotes00Rs.getMcotos001s());	-- PENDIENTE
			//Se valida si las listas del formulario tienen campos deshabilitados
			if(validarListas()==true){
				//Se ejecuta el metodo para que no se pierda el objeto de las listas al momento de hacer un submit en el guardar
				UtilsJSF.tratamientoObjetoDeshabilitadoListas(tqigqg00.getMgenus001(), tqigqg00.getMgenus001().getMtipre00().getTipore());
				UtilsJSF.tratamientoObjetoDeshabilitadoListas(tqigqg00.getMgenus002(), tqigqg00.getMgenus002().getMtipre00().getTipore());
				UtilsJSF.tratamientoObjetoDeshabilitadoListas(tqigqg00.getMgenus003(), tqigqg00.getMgenus003().getMtipre00().getTipore());
				UtilsJSF.tratamientoObjetoDeshabilitadoListas(tqigqg00.getMtiptx00(), null);
				UtilsJSF.tratamientoObjetoDeshabilitadoListas(tqigqg00.getMpropr00(), null);
				UtilsJSF.tratamientoObjetoDeshabilitadoListas(tqigqg00.getMfunfu001(), null);
				UtilsJSF.tratamientoObjetoDeshabilitadoListas(tqigqg00.getMfunfu002(), null);

			}
			tqigqg00Cop= (Tqigqg00) tqigqg00.clone();	
		} catch (Exception e) {
			e.printStackTrace();
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(), FacesMessage.SEVERITY_ERROR);
		}
	}
	
	// metedo que captura el objeto al modificar y actualiza las listas de compañias 
	private void actualizarListasCompania (String codigoCompania){
		try{
			List<String> listMconca00ActualizarListas;
			listMconca00ActualizarListas = new ArrayList<String>();
			listMconca00ActualizarListas.add(codigoCompania);
			
			getSeListas().actualizarListasCompania(NombresListas.listMgenteCliente, listMconca00ActualizarListas);
			getSeListas().actualizarListasCompania(NombresListas.listMconca , listMconca00ActualizarListas);
			getSeListas().actualizarListasCompania(NombresListas.listMgenusMoneda, listMconca00ActualizarListas);
			getSeListas().actualizarListasCompania(NombresListas.listMgenusOrganiVentas, listMconca00ActualizarListas);
			getSeListas().actualizarListasCompania(NombresListas.listMgenusCanalDistri , listMconca00ActualizarListas);
			getSeListas().actualizarListasCompania(NombresListas.listMpropr, listMconca00ActualizarListas);
			getSeListas().actualizarListasCompania(NombresListas.listMfunfu, listMconca00ActualizarListas);
			//getSeListas().actualizarListasCompania(NombresListas.listMfunfuFunciApoyo, listMconca00ActualizarListas);
			RequestContext.getCurrentInstance().update("formTable");
			}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void autocompleteActualizarListas (){
		try{
			if(tqigqg00.getMgenus001() != null){
			actualizarListasCompania(tqigqg00.getMgenus001().getCodius());
			}else{
				reiniciarListasMaestro();
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	private void colaEstandar() {
		try {
			tqigqg00.setUsecqg(getSeControlFactura().codusu);
			tqigqg00.setPrgcqg("Cotizacion_Estandar " + getClass().getName());
			tqigqg00.setFeacqg(new Date());
			tqigqg00.setMaqcqg(getSeControlFactura().ip);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/*Metodo que se encarga de validar que los registros de las listas esten habilitados
	 * en caso de estar deshabilitado algun registro devuelve true
	 */
	private boolean validarListas(){
		boolean validacion = false;
		//Se valida que las listas que tiene el usuario en el formulario esten activas 
//		
		//Validacion lista  Tipo Transacciòn
		if(tqigqg00.getMtiptx00() != null &&  tqigqg00.getMtiptx00().isRegtxt()==false){
			UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, 
		    getIdiomasHm().get("idtxqg")+" "+ tqigqg00.getMtiptx00().getIdtitx() +" "+getSeControlFactura().MENSAJES.get("Cam_Deshab"));			
			validacion = true;
		}
		
		//Validacion lista Cliente o Prospecto
		if(tqigqg00.getMgente00() != null &&  tqigqg00.getMgente00().getRegite()==false){
			UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, 
		    getIdiomasHm().get("idclqg")+" "+ tqigqg00.getMgente00().getCodite() +" "+getSeControlFactura().MENSAJES.get("Cam_Deshab"));			
			validacion = true;
		}
		
		//Validacion lista  Moneda Cotizacion
		if(tqigqg00.getMgenus001() != null &&  tqigqg00.getMgenus001().getRegius()==false){
			UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, 
		    getIdiomasHm().get("idmoqg")+" "+ tqigqg00.getMgenus001().getCodius() +" "+getSeControlFactura().MENSAJES.get("Cam_Deshab"));			
			validacion = true;
		}
		
		//Validacion lista  Organización Ventas
		if(tqigqg00.getMpropr00() != null &&  tqigqg00.getMpropr00().getRegipr()==false){
			UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, 
		    getIdiomasHm().get("idppqg")+" "+ tqigqg00.getMpropr00().getCodcpr() +" "+getSeControlFactura().MENSAJES.get("Cam_Deshab"));			
			validacion = true;
		}
		
		//Validacion lista  Funcionario Comercial Responsable
		if(tqigqg00.getMfunfu001() != null &&  tqigqg00.getMfunfu001().isRegufu()==false){
			UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, 
		    getIdiomasHm().get("idfrqg")+" "+ tqigqg00.getMfunfu001().getCocufu()+" "+getSeControlFactura().MENSAJES.get("Cam_Deshab"));			
			validacion = true;
		}
		//Validacion lista  Funcionario Apoyo Tecnico Preventa
		if(tqigqg00.getMfunfu002() != null &&  tqigqg00.getMfunfu002().isRegufu()==false){
			UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, 
		    getIdiomasHm().get("idfaqg")+" "+ tqigqg00.getMfunfu002().getCocufu() +" "+getSeControlFactura().MENSAJES.get("Cam_Deshab"));			
			validacion = true;
		}
		
		//Validacion lista  Organización Ventas
		if(tqigqg00.getMgenus002() != null &&  tqigqg00.getMgenus002().getRegius()==false){
			UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, 
		    getIdiomasHm().get("idovqg")+" "+ tqigqg00.getMgenus002().getCodius() +" "+getSeControlFactura().MENSAJES.get("Cam_Deshab"));			
			validacion = true;
		}

		//Validacion lista  Canal Distribución
		if(tqigqg00.getMgenus003() != null &&  tqigqg00.getMgenus003().getRegius()==false){
			UtilsJSF.facesLog(FacesMessage.SEVERITY_ERROR, 
		    getIdiomasHm().get("idcvqg")+" "+ tqigqg00.getMgenus003().getCodius() +" "+getSeControlFactura().MENSAJES.get("Cam_Deshab"));			
			validacion = true;
		}
		
		return validacion;
	}
	
	public void save() {
		try {	
									
			//Se guardan los datos de la cola estandar
			colaEstandar();
			if(getAccion().equals(Constantes.ACCION_MODIFICAR))
			{
				if(validarListas()==false){
					tqigqg00Service.save(tqigqg00,getSeControlFactura().PARAMETROS.get("Reg_Audito").equals("S")?getSeControlFactura().crearAuditoria(null,tqigqg00.toString(),tqigqg00.toStringId(),tqigqg00Cop.toString()):null);
				}else return;
			} else {
				tqigqg00Service.save(tqigqg00,getSeControlFactura().PARAMETROS.get("Reg_Audito").equals("S")?getSeControlFactura().crearAuditoria(null,tqigqg00.toString(),tqigqg00.toStringId(),null):null);
			 }
			cargarDatos();	
			UtilsJSF.closeDialog("dlgNuevoUpdate");
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(), FacesMessage.SEVERITY_INFO);
			RequestContext.getCurrentInstance().update("formTable");
		} catch (Exception e) {
			if (UtilsJSF.isDuplicateException(e)) {
				UtilsJSF.facesLog(FacesContext.getCurrentInstance(),"UNIQUE_KEY");
				return;
			} else {
				e.printStackTrace();
				UtilsJSF.facesLog(FacesContext.getCurrentInstance(), FacesMessage.SEVERITY_ERROR);
				return;
			}
		}
	}
	
	public void remove(ActionEvent event) {
		try {
			getSeControlFactura().setTitulo(titulo);
			getSeControlFactura().setTabla(tabla);
			tqigqg00 = (Tqigqg00) event.getComponent().getAttributes().get("tqigqg00");
			tqigqg00Service.removeTqigqg00(tqigqg00,getSeControlFactura().PARAMETROS.get("Reg_Audito").equals("S")?getSeControlFactura().crearAuditoria(Constantes.AUDIT_ELIMINAR,tqigqg00.toString(),tqigqg00.toStringId()):null);
			cargarDatos();
			getSeListas().actualizarListas(NombresListas.listMconca);
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(),FacesMessage.SEVERITY_INFO);
			RequestContext.getCurrentInstance().update("formTable");
		} catch (Exception e) {
			if (UtilsJSF.isReferenceConstraintException(e)) {
				UtilsJSF.facesLog(FacesContext.getCurrentInstance(),"REFERENCE");
			} else {
				e.printStackTrace();
				UtilsJSF.facesLog(FacesContext.getCurrentInstance(),FacesMessage.SEVERITY_ERROR);
			}
		}
	}
	
	public void preRenderView() {
		try {
			getSeCabecera().setBotonNuevo(true);
			getSeCabecera().setBotonExcel(true);

		} catch (Exception e) {
			e.printStackTrace();
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(), FacesMessage.SEVERITY_ERROR);
		}
	}
	
	public void evtCloseDialogTqigqg00(CloseEvent event) {
        try {   
        	update=null;
        	if (!Utils.isEmptyOrNull(getAccion()) && getAccion().equals(Constantes.ACCION_MODIFICAR) && !infoGuardada){
        		tqigqg00.setMtiptx00(tqigqg00Cop.getMtiptx00());
        		tqigqg00.setMgenus001(tqigqg00Cop.getMgenus001());
        		tqigqg00.setMgenus002(tqigqg00Cop.getMgenus002());
        		tqigqg00.setMgenus003(tqigqg00Cop.getMgenus003());
        		tqigqg00.setMgente00(tqigqg00Cop.getMgente00());
        		tqigqg00.setMpropr00(tqigqg00Cop.getMpropr00());
        		tqigqg00.setMfunfu001(tqigqg00Cop.getMfunfu001());
        		tqigqg00.setMfunfu002(tqigqg00Cop.getMfunfu002());	
        
        	}
        	evtCloseDialog(event);
        }
        catch(Exception e)
        {
        	e.printStackTrace();
			UtilsJSF.facesLog(FacesContext.getCurrentInstance(), FacesMessage.SEVERITY_ERROR);
        }
     }
	
	public void uploadDocCoti(FileUploadEvent event) {
		try {
			 docAnterior= tqigqg00.getAdjuqg();
			 setDocCoti(event.getFile());
			 changeDoc=true;
			 tqigqg00.setAdjuqg("");
			 setImageStrem(new DefaultStreamedContent(event.getFile().getInputstream()));				
							
		}
	    catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void removeDoc() {
		try {
			docAnterior = tqigqg00.getAdjuqg();
			setDocCoti(null);
			tqigqg00.setAdjuqg(null);
			changeDoc=true;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public String ObtenerCliente(){
		try {
			 
				//listMgenus00s =   mgenus00Service.listMgenus00ByCriteria(mgenus00, getSeControlFactura().getCompaniasUsu()); 

			//System.out.print("Codius Actual: " +listMgenus00s.get);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "Nekra";
		
	}
	
	public String generar_Numero_CotizacionSHS(){
		System.out.println("Generando Consecutivo");
		String dato = "00";
		int suffix = 0;
		try {
			
			//for (Tqigqg00 tqigqg : tqigqg00.getMtiptx00()){ //Se recorre la lista de detalles del pedido Tdpedi00	
				//tqigqg.setMtiptx00s(new ArrayList<Tqigqg00>()); 
			//}
			//obtenerListaMgenus00(codtus);
			//obtenerListaMtiptx00s(codtus);
			Tqigqg00 tqigqg00 = new Tqigqg00();
			Mtiptx00 mtiptx00 = new Mtiptx00();
			listMtiptx00 = mtiptx00Service.listMtiptx00ByCriteria(mtiptx00, getSeControlFactura().getCompaniasUsu());
			//System.out.println("Suffix: "+listMtiptx00.get(8));
			
			//mtiptx00.setSufttx("Funcionarios " + mtiptx00.getSufttx());
			//listMgenus00s =   mtiptx00Service.listMtiptx00ByCriteria(mtiptx00, getSeControlFactura().getCompaniasUsu()); 

			//suffix= mtiptx00Service.cargarUltimoSufijo();
			System.out.println("Suffijo? "+suffix);
			//dato = mtiptx00.getSufttx();
			//dato = (listMtiptx00.get(8).toString());
			//System.out.println(dato);
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return dato;
		
	}
	
	public List<Mgenus00> obtenerListaMgenus00(String codtus){
	    mgenus00 = new Mgenus00();
		mgenus00.setRegius(true);
		return mgenus00Service.listMgenus00ByCriteriaAndlistMusuco00(mgenus00, getSeControlFactura().getCompaniasUsu()); 
	}
	
	public List<Mtiptx00> obtenerListaMtiptx00s(String codtus){
		mtiptx00 = new Mtiptx00();
	    mtiptx00.setRegtxt(true);
	    System.out.print("mtiptx00: "+mtiptx00.getSufttx());
		return mtiptx00Service.listMtiptx00ByCriteria(mtiptx00, getSeControlFactura().getCompaniasUsu()); 
	}
	

	public ITqigqg00Service getTqigqg00Service() {
		return tqigqg00Service;
	}

	public void setTqigqg00Service(ITqigqg00Service tqigqg00Service) {
		this.tqigqg00Service = tqigqg00Service;
	}

	public SeListas getSeListas() {
		return seListas;
	}

	public void setSeListas(SeListas seListas) {
		this.seListas = seListas;
	}

	public Tqigqg00 getTqigqg00() {
		return tqigqg00;
	}

	public void setTqigqg00(Tqigqg00 tqigqg00) {
		this.tqigqg00 = tqigqg00;
	}

	public Tqigqg00 getTqigqg00Cop() {
		return tqigqg00Cop;
	}

	public void setTqigqg00Cop(Tqigqg00 tqigqg00Cop) {
		this.tqigqg00Cop = tqigqg00Cop;
	}

	public List<Tqigqg00> getListTqigqg00() {
		return listTqigqg00;
	}

	public void setListTqigqg00(List<Tqigqg00> listTqigqg00) {
		this.listTqigqg00 = listTqigqg00;
	}

	public List<Tqigqg00> getFilteredTqigqg00() {
		return filteredTqigqg00;
	}

	public void setFilteredTqigqg00(List<Tqigqg00> filteredTqigqg00) {
		this.filteredTqigqg00 = filteredTqigqg00;
	}

	public String getUpdate() {
		return update;
	}

	public void setUpdate(String update) {
		this.update = update;
	}

	public String getNombreTabla() {
		return nombreTabla;
	}

	public void setNombreTabla(String nombreTabla) {
		this.nombreTabla = nombreTabla;
	}

	public String getNombreLista() {
		return nombreLista;
	}

	public void setNombreLista(String nombreLista) {
		this.nombreLista = nombreLista;
	}

	public Object getObjSeCall() {
		return objSeCall;
	}

	public void setObjSeCall(Object objSeCall) {
		this.objSeCall = objSeCall;
	}

	public Integer getFracDec_CantiM() {
		return fracDec_CantiM;
	}

	public void setFracDec_CantiM(Integer fracDec_CantiM) {
		this.fracDec_CantiM = fracDec_CantiM;
	}

	public Integer getFracDec_PorceM() {
		return fracDec_PorceM;
	}

	public void setFracDec_PorceM(Integer fracDec_PorceM) {
		this.fracDec_PorceM = fracDec_PorceM;
	}

	public Map<String, String> getIdiomasHm() {
		return idiomasHm;
	}

	public void setIdiomasHm(Map<String, String> idiomasHm) {
		this.idiomasHm = idiomasHm;
	}

	public Map<String, String> getIdiomasAyuHm() {
		return idiomasAyuHm;
	}

	public void setIdiomasAyuHm(Map<String, String> idiomasAyuHm) {
		this.idiomasAyuHm = idiomasAyuHm;
	}

	public Map<String, String> getPermisos() {
		return permisos;
	}

	public void setPermisos(Map<String, String> permisos) {
		this.permisos = permisos;
	}

	public HashMap<String, String> getIdiomasTituloHm() {
		return idiomasTituloHm;
	}

	public void setIdiomasTituloHm(HashMap<String, String> idiomasTituloHm) {
		this.idiomasTituloHm = idiomasTituloHm;
	}

	public HashMap<String, Mcampo00> getPermisoCampos() {
		return permisoCampos;
	}

	public void setPermisoCampos(HashMap<String, Mcampo00> permisoCampos) {
		this.permisoCampos = permisoCampos;
	}

	public String getTabla() {
		return tabla;
	}

	public void setTabla(String tabla) {
		this.tabla = tabla;
	}

	public String getAccion() {
		return accion;
	}

	public void setAccion(String accion) {
		this.accion = accion;
	}

	public String getTitulo() {
		return titulo;
	}

	public void setTitulo(String titulo) {
		this.titulo = titulo;
	}

	public boolean isTabInfBase() {
		return tabInfBase;
	}

	public void setTabInfBase(boolean tabInfBase) {
		this.tabInfBase = tabInfBase;
	}

	
	public String[] getPestanas() {
		return pestanas;
	}

	public void setPestanas(String[] pestanas) {
		this.pestanas = pestanas;
	}

	public int getTabView() {
		return tabView;
	}

	public void setTabView(int tabView) {
		this.tabView = tabView;
	}

	public boolean isInfoGuardada() {
		return infoGuardada;
	}

	public void setInfoGuardada(boolean infoGuardada) {
		this.infoGuardada = infoGuardada;
	}
	
	public SeCabecera getSeCabecera() {
		return seCabecera;
	}
	public void setSeCabecera(SeCabecera seCabecera) {
		this.seCabecera = seCabecera;
	}
	

	public boolean isTabReq_Prod() {
		return tabReq_Prod;
	}

	public void setTabReq_Prod(boolean tabReq_Prod) {
		this.tabReq_Prod = tabReq_Prod;
	}

	public boolean isTabForma_Pago() {
		return tabForma_Pago;
	}

	public void setTabForma_Pago(boolean tabForma_Pago) {
		this.tabForma_Pago = tabForma_Pago;
	}

	public boolean isTabEnvios() {
		return tabEnvios;
	}

	public void setTabEnvios(boolean tabEnvios) {
		this.tabEnvios = tabEnvios;
	}

	public String getPaternDec_CantiM() {
		return paternDec_CantiM;
	}

	public void setPaternDec_CantiM(String paternDec_CantiM) {
		this.paternDec_CantiM = paternDec_CantiM;
	}

	public UploadedFile getDocCoti() {
		return DocCoti;
	}

	public void setDocCoti(UploadedFile docCoti) {
		this.DocCoti = docCoti;
	}

	public boolean isChangeDoc() {
		return changeDoc;
	}

	public void setChangeDoc(boolean changeDoc) {
		this.changeDoc = changeDoc;
	}

	public StreamedContent getImageStrem() {
		return imageStrem;
	}

	public void setImageStrem(StreamedContent imageStrem) {
		this.imageStrem = imageStrem;
	}

	public String getDocAnterior() {
		return docAnterior;
	}

	public void setDocAnterior(String docAnterior) {
		this.docAnterior = docAnterior;
	}
	
	public Mgenus00 getMgenus00() {
		return mgenus00;
	}

	public void setMgenus00(Mgenus00 mgenus00) {
		this.mgenus00 = mgenus00;
	}

	public void setMgenus00Service(IMgenus00Service mgenus00Service) {
		this.mgenus00Service = mgenus00Service;
	}

	public List<Mgenus00> getListMgenus00s() {
		return listMgenus00s;
	}

	public void setListMgenus00s(List<Mgenus00> listMgenus00s) {
		this.listMgenus00s = listMgenus00s;
	}

	public IMtiptx00Service getMtiptx00Service() {
		return mtiptx00Service;
	}

	public void setMtiptx00Service(IMtiptx00Service mtiptx00Service) {
		this.mtiptx00Service = mtiptx00Service;
	}

	public List<Mtiptx00> getListMtiptx00() {
		return listMtiptx00;
	}

	public void setListMtiptx00(List<Mtiptx00> listMtiptx00) {
		this.listMtiptx00 = listMtiptx00;
	}

	public Mtiptx00 getMtiptx00() {
		return mtiptx00;
	}

	public void setMtiptx00(Mtiptx00 mtiptx00) {
		this.mtiptx00 = mtiptx00;
	}

	
}
