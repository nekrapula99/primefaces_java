package com.tlm.faelec.model.dao.impl;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.FetchMode;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Property;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.tlm.faelec.model.dao.AbstractDAO;
import com.tlm.faelec.model.dao.ITqdrqr00Dao;

import com.tlm.faelecEntities.model.entities.Tqdrqr00;
import com.tlm.faelecEntities.model.entities.Tqdrqr00;

@Repository
public class Tqdrqr00DaoImpl extends AbstractDAO<Tqdrqr00> implements ITqdrqr00Dao{


	@Autowired
	private SessionFactory sessionFactory;
	
	@Override
	protected SessionFactory getSessionFactory() {
		return sessionFactory;
	}
	
	public void setSessionFactory(SessionFactory sessionFactory){
		this.sessionFactory = sessionFactory;	
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Tqdrqr00> listTqdrqr00ByCriteria(Tqdrqr00 tqdrqr00) {
		Criteria c = getSessionFactory().getCurrentSession().createCriteria(Tqdrqr00.class);
		
		c.setFetchMode("tqdrqr00", FetchMode.DEFAULT).createAlias("tqdrqr00", "tqdrqr00",Criteria.LEFT_JOIN);
		c.setFetchMode("mgenus001", FetchMode.DEFAULT).createAlias("mgenus001", "mgenus001",Criteria.LEFT_JOIN);
		c.setFetchMode("mgenus002", FetchMode.DEFAULT).createAlias("mgenus002", "mgenus002",Criteria.LEFT_JOIN);
		c.setFetchMode("mgenus003", FetchMode.DEFAULT).createAlias("mgenus003", "mgenus003",Criteria.LEFT_JOIN);
		
		if(tqdrqr00.isRegcqr()!=false){
			c.add(Restrictions.eq("regcqr", tqdrqr00.isRegcqr()));
			
		}
		
		return c.list();
	}
	
	/*public List<Tqdrqr00> listTqdrqr00Criteria(Tqdrqr00 tqdrqr00, List<String> listMusuco00) {
		Criteria c = getSessionFactory().getCurrentSession().createCriteria(Tqdrqr00.class);
		
		if(listMusuco00!=null)
		{
			c.add(Restrictions.or(Restrictions.in("mconca00.codcia", listMusuco00),Restrictions.isNull("mconca00")));
		}
		
		if(tqdrqr00.isRegcqr()!= false)
		{
			c.add(Restrictions.eq("regcqr", tqdrqr00.isRegcqr()));
		}
		c.addOrder(Property.forName("crqrqr").asc());
		
		return c.list();
	 }*/

}